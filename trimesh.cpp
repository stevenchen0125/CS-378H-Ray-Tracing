#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <iostream>
#include "../ui/TraceUI.h"
extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	//cout << "before distance" << endl;
	glm::dvec3 a_coords = parent->vertices[ids[0]];
	glm::dvec3 b_coords = parent->vertices[ids[1]];
	glm::dvec3 c_coords = parent->vertices[ids[2]];

	glm::dvec3 normal = this->normal;
	glm::dvec3 origin = r.getPosition();
	glm::dvec3 direction = r.getDirection();
	
	double distance = (glm::dot((a_coords - origin),(normal)) / glm::dot((direction),(normal)));
	//cout << "distance: " << distance << endl;
	if (distance <= 0) return false;

	glm::dvec3 p_coords = origin + distance*direction;

	glm::dvec3 vab = (b_coords - a_coords);
	glm::dvec3 vca = (a_coords - c_coords);
	glm::dvec3 vbc = (c_coords - b_coords);
	glm::dvec3 vap = (p_coords - a_coords);
	glm::dvec3 vcp = (p_coords - c_coords);
	glm::dvec3 vbp = (p_coords - b_coords);

	glm::dvec3 a_cross = glm::cross(vab,vap);
	glm::dvec3 b_cross = glm::cross(vbc,vbp);
	glm::dvec3 c_cross = glm::cross(vca,vcp);
	glm::dvec3 whole_cross = glm::cross(vab,-(vca));


	double a_const = glm::dot((a_cross),normal);
	double b_const = glm::dot((b_cross),normal);
	double c_const = glm::dot((c_cross),normal);

	double a_area = sqrt(glm::dot(a_cross,a_cross));
	double b_area = sqrt(glm::dot(b_cross,b_cross)); 
	double c_area = sqrt(glm::dot(c_cross,c_cross)); 
	double whole_area = sqrt(glm::dot(whole_cross,whole_cross));

	if(a_const >= 0 && b_const >= 0 && c_const >= 0){
		i.setT(distance);
		i.setBary(c_area / whole_area, a_area / whole_area, b_area / whole_area);
		i.setN(normal);
		i.setMaterial(*(this->materials));
		//cout << true << endl;
		return true;
	}
	//cout << false << endl;
	return false;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

